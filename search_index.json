[["index.html", "MNet Chapter 1 Introduction", " MNet Tuantuan Gui and Hai Fang 2022-11-07 Chapter 1 Introduction Technological advances in metabolomics make it increasingly reliable to comprehensively detect and quantify small compounds in an unbiased manner. With the reduced costs come a wide range of applications, for example, in epidemiological, genetic and clinical studies. Meanwhile, integrated analyses of metabolomics with other omics, for example, gene expression transcriptomic datasets, are receiving the increasing attention, including but not limited to: graphite, Metscape, OmicsNet, PaintOmics and OmicsAnalyst. Most of these existing tools, however, only deal with individual pathways or can’t extract the subnetwork involving multiple pathways; in other words, they do not consider the network knowledge of gene-metabolite or metabolite-metabolite relations hidden in available metabolic pathways. Here we present “MNet”, an R package enabling network-based integration of metabolomics with clinical and transcriptomic data. In this tutorial, we will present: 1. How to install MNet.(have done) 2. A quick start tutorial of MNet.(have done) 3. Detailed functionality description of MNet. 4. Two use cases using MNet. 5. A time-course use case using MNet. 6. Structure of MNet object. "],["quick-start.html", "Chapter 2 Quick Start 2.1 Overview of Workflow 2.2 Installation", " Chapter 2 Quick Start In this chapter, we will describe the three main functionalities of MNet and present the quick-start code template of MNet workflow. The data in this chapter are included in the MNet package. And through this chapter, you will learn: The workflow of MNet. The installation of MNet A quick-start code template of MNet workflow. And for the detailed version and advanced application of MNet, please read Chapter 3 and Chapter 4. 2.1 Overview of Workflow The package is designed to provide a collection of functionalities aiding in metabolome data interpretation together with clinical data and gene expression data. It not only supports the routine analyses and visualisations in terms of metabolomic datasets (including but not limited to: differential metabolites analyses/visualisations/feature selection), the differential abundance analyses which is designed to detect which pathways are differentially abundant between two conditions, but also is capable of carrying out integrated analysis of metabolic and clinical data (such as ggcor package), integrated analysis of metabolic and gene expression data (the metabolite and gene pathway analyses and the subnetwork analyses of metabolite-gene network analyses). Also supported is the time series analysis with the help of other packages (mFuzz package and supraHex package). 2.2 Installation The MNet R package requires R version 4.0.0 or higher. ggcor and XGR are from GitHub. Hence, it is recommended to install the package before installing MNet. devtools::install_github(&quot;Github-Yilei/ggcor&quot;) devtools::install_github(&quot;hfang-bristol/XGR&quot;) MNet is available for all operating systems and can be installed via the Github. devtools::install_github(&quot;tuantuangui/MNet&quot;) library(MNet) "],["example-uniquely-analyses.html", "Chapter 3 Example-uniquely analyses 3.1 Loading the data 3.2 Integrated analyses", " Chapter 3 Example-uniquely analyses 3.1 Loading the data library(dplyr) #dat &lt;- &quot;https://raw.githubusercontent.com/tuantuangui/MNet_data/main/mexpr.txt&quot; dat &lt;- &quot;data/mexpr.txt&quot; mexpr &lt;- data.table::fread(dat,sep=&quot;\\t&quot;) %&gt;% tibble::column_to_rownames(&quot;V1&quot;) #dat &lt;- &quot;https://raw.githubusercontent.com/tuantuangui/MNet_data/main/gene_dat.txt&quot; dat &lt;- &quot;data/gene_dat.txt&quot; gene_dat &lt;- data.table::fread(dat,sep=&quot;\\t&quot;) %&gt;% tibble::column_to_rownames(&quot;V1&quot;) 3.2 Integrated analyses 3.2.1 Extended pathway analysis The extended pathway analysis library(MNet) library(ggplot2) gene &lt;- c(&quot;B4GALT2&quot;,&quot;AGPAT3&quot;,&quot;FHIT&quot;,&quot;BLVRA&quot;,&quot;POMGNT2&quot;) meta &lt;- c(&quot;C00398&quot;,&quot;C00004&quot;,&quot;C00005&quot;,&quot;C00003&quot;,&quot;C00025&quot;,&quot;C00032&quot;) extend_pathway_result &lt;- PathwayAnalysis(c(meta,gene)) # the plot is ggsave(&quot;data/extend_pathway.png&quot;,extend_pathway_result$gp) # the output table is write.table(extend_pathway_result$output,&quot;data/extend_pathway_out.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) The gene pathway analysis gene_pathway_result &lt;- PathwayAnalysis(gene,out=&quot;gene&quot;) # the plot is ggsave(&quot;data/gene_pathway.png&quot;,gene_pathway_result$gp) # the output table is write.table(gene_pathway_result$output,&quot;data/gene_pathway_out.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) The metabolite pathway analysis library(MNet) meta_pathway_result &lt;- PathwayAnalysis(meta,out=&quot;metabolite&quot;) # the plot is ggsave(&quot;data/meta_pathway.png&quot;,meta_pathway_result$gp) # the output table is write.table(metabolite_pathway_result$output,&quot;data/metabolite_pathway_out.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) 3.2.2 Extended DA score the extended differential abundance (DA) score analysis ## 4.1 the differential metabolites&#39; DA score name &lt;- c(&quot;C00022&quot;,&quot;C00024&quot;,&quot;C00031&quot;,&quot;B4GALT2&quot;,&quot;AGPAT3&quot;,&quot;FHIT&quot;) DAscore_result &lt;- DAscore(c(name[1],name[4]),name[2],name,min_measured_num = 2,sort_plot = &quot;classification&quot;,out=&quot;extended&quot;) ggsave(&quot;data/extend_DAscore.png&quot;,DAscore_result$p,width=10,height=8) write.table(DAscore_result$result,&quot;data/extend_DAscore.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) the gene differential abundance (DA) score analysis ## 4.1 the differential metabolites&#39; DA score name &lt;- c(&quot;B4GALT2&quot;,&quot;AGPAT3&quot;,&quot;FHIT&quot;) DAscore_result &lt;- DAscore(c(name[1],name[2]),name[3],name,min_measured_num = 0,sort_plot = &quot;classification&quot;,out=&quot;gene&quot;) ggsave(&quot;data/gene_DAscore.png&quot;,DAscore_result$p,width=10,height=8) # the output txt file write.table(DAscore_result$result,&quot;data/gene_DAscore.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) the metabolites differential abundance (DA) score analysis ## 4.1 the differential metabolites&#39; DA score name &lt;- c(&quot;C00022&quot;,&quot;C00024&quot;,&quot;C00031&quot;) DAscore_result &lt;- DAscore(c(name[1],name[3]),name[2],name,min_measured_num = 2,sort_plot = &quot;classification&quot;,out=&quot;metabolite&quot;) ggsave(&quot;data/metabolite_DAscore.png&quot;,DAscore_result$p,width=10,height=8) write.table(DAscore_result$result,&quot;data/metabolite_DAscore.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) 3.2.3 All network in our database gene_metabolite &lt;- gene_metabolite_1 %&gt;% dplyr::select(-&quot;pathway_type&quot;) %&gt;% unique() nodes1 &lt;- gene_metabolite[,1:2] nodes2 &lt;- gene_metabolite[,3:4] names(nodes1) &lt;- c(&quot;type&quot;,&quot;name&quot;) names(nodes2) &lt;- c(&quot;type&quot;,&quot;name&quot;) nodes &lt;- rbind(nodes1,nodes2) %&gt;% unique() %&gt;% dplyr::select(c(&quot;name&quot;,&quot;type&quot;)) network &lt;- igraph::graph_from_data_frame(d=gene_metabolite[,c(2,4)], vertices=nodes,directed=F) #plot(network) name &lt;- data.frame(name=igraph::V(network)$name) %&gt;% dplyr::left_join(nodes,by=&quot;name&quot;) coul &lt;- c(&quot;blue&quot;,&quot;red&quot;) my_color &lt;- coul[as.numeric(as.factor(name$type))] #my_color shape1=c(&quot;square&quot;,&quot;circle&quot;) my_shape &lt;- shape1[as.numeric(as.factor(name$type))] #计算每个节点的数量 deg &lt;- igraph::degree(network, mode=&quot;all&quot;) plot(network,vertex.color=my_color,vertex.shape=my_shape,vertex.size=deg**0.3, vertex.label.cex=0.2) 3.2.4 Subnetwork analysis of Metabolism and transcriptome data from TNBC: group &lt;- rep(&quot;normal&quot;,length(names(mexpr))) group[grep(&quot;TUMOR&quot;,names(mexpr))] &lt;- &quot;tumor&quot; dat &lt;- rbind(gene_dat,log(mexpr)) result &lt;- mlimma(dat,group) a &lt;- pdnet(mexpr,gene_dat,result,nsize=50) "],["example-rountinely-analyses.html", "Chapter 4 Example-rountinely analyses 4.1 Metabolite name change 4.2 Group-wise analyses 4.3 Feature selection 4.4 Pathway analysis 4.5 Time series analysis 4.6 Clinical analysis", " Chapter 4 Example-rountinely analyses 4.1 Metabolite name change 4.1.1 Metabolite name changed to refmet name This step requires networking RefMet: A Reference list of Metabolite names The main objective of RefMet is to provide a standardized reference nomenclature for both discrete metabolite structures and metabolite species identified by spectroscopic techniques in metabolomics experiments. compound_name &lt;- c(&quot;2-Hydroxybutyric acid&quot;,&quot;1-Methyladenosine&quot;,&quot;tt&quot;,&quot;2-Aminooctanoic acid&quot;) refmetid_result &lt;- name2refmet(compound_name) write.table(refmetid_result,&quot;result/refmetid_result.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) 4.1.2 Metabolite name changed to kegg id This step requires networking search the kegg id corresponding to the metabolites name compound_name &lt;- c(&quot;2-Hydroxybutyric acid&quot;,&quot;1-Methyladenosine&quot;,&quot;tt&quot;,&quot;2-Aminooctanoic acid&quot;) keggid_result &lt;- name2keggid(compound_name) %&gt;% tidyr::separate_rows(kegg_id,sep=&quot;;&quot;) %&gt;% tibble::as_tibble() write.table(keggid_result,&quot;result/keggid_result.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) 4.1.3 Metabolite name corresponding to kegg pathway This step requires networking search the kegg pathway corresponding to the metabolite name result_all &lt;- name2pathway(compound_name) ##### the output is the each metabolite related pathway result_name2pathway &lt;- result_all$name2pathway write.table(result_name2pathway,&quot;result/keggpathway_result.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) 4.1.4 Metabolite keggid to kegg pathway keggid &lt;- c(&quot;C05984&quot;,&quot;C02494&quot;) ##### the output is the each metabolite related pathway keggpathway_result &lt;- keggid2pathway(keggid) head(keggpathway_result) 4.2 Group-wise analyses 4.2.1 PCA plot PCA of the data ### the pca plot p_PCA &lt;- pPCA(mexpr,group) ggplot2::ggsave(&quot;result/1.PCA_1.png&quot;,p_PCA$p1) ggplot2::ggsave(&quot;result/1.PCA_2.png&quot;,p_PCA$p2) ggplot2::ggsave(&quot;result/1.PCA_3.png&quot;,p_PCA$p3) 4.2.2 Differnetial metabolite analysis 4.2.2.1 using the function mlimma in R packages “MNet” diff_result &lt;- mlimma(mexpr,group) 4.2.2.2 using the function DM in R packages “MNet” diff_result &lt;- DM(mexpr,group) dev.off() write.table(diff_result,&quot;result/DM_result.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) ## filter the differential metabolites by default fold change &gt;1.5 or &lt; 1/1.5 ,fdr &lt; 0.05 and VIP&gt;1 diff_result_filter &lt;- diff_result %&gt;% dplyr::filter(fold_change &gt;1.3 | fold_change &lt; 1/1.3) %&gt;% dplyr::filter(fdr_wilcox&lt;0.1) %&gt;% dplyr::filter(vip&gt;0.8) utils::write.table(diff_result,&quot;result/2.all_TumorvsNormal.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) utils::write.table(diff_result_filter,&quot;result/2.diff_TumorvsNormal.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) 4.2.3 Differential metabolites’ volcano the volcano plot of metabolites using the function “pVolcano” in the package “MNet” p_volcano &lt;- pVolcano(diff_result,foldchange=1.5) #p_volcano ggplot2::ggsave(&quot;result/3.volcano.pdf&quot;,p_volcano) ggplot2::ggsave(&quot;result/3.volcano.png&quot;,p_volcano) 4.2.4 Differential metabolites’ heatmap the heatmap plot of differentital metabolites using the function “pHeatmap” in R package “MNet” mexpr_diff &lt;- mexpr[rownames(mexpr) %in% diff_result_filter$name,] p_heatmap &lt;- pHeatmap(mexpr_diff,group,fontsize_row=5,fontsize_col=4,clustering_method=&quot;complete&quot;,clustering_distance_cols=&quot;euclidean&quot;) ggplot2::ggsave(&quot;result/3.heatmap.png&quot;,p_heatmap,width=10,height=8) 4.2.5 Differential metabolites’ zscore the zscore plot of differentital metabolites using the function “pZscore” in R package “MNet” p_zscore &lt;- pZscore(mexpr_diff,group) #p_zscore ggplot2::ggsave(&quot;result/3.z_score.png&quot;,p_zscore,width=5,height=5) 4.3 Feature selection 4.3.1 Boruta group &lt;- rep(&quot;normal&quot;,length(names(mexpr))) group[grep(&quot;TUMOR&quot;,names(mexpr))] &lt;- &quot;tumor&quot; mexpr1 &lt;- t(mexpr) %&gt;% as.data.frame() %&gt;% dplyr::mutate(group=group) result_ML_Boruta &lt;- ML_Boruta(mexpr1) 4.3.2 Random Forest result_ML_RF &lt;- ML_RF(mexpr1) result_ML_RF$p result_ML_RF$feature_result 4.3.3 XGBoost result_ML_xgboost &lt;- ML_xgboost(mexpr1) result_ML_xgboost$p result_ML_xgboost$feature_result 4.3.4 LASSO result_ML_lasso &lt;- ML_alpha(mexpr1,method=&quot;lasso&quot;) 4.3.5 elastic network result_ML_elastic &lt;- ML_alpha(mexpr1,method=&quot;elastic&quot;) 4.4 Pathway analysis 4.4.1 pathview only metabolite dir.create(&quot;result/pathview/metabolite&quot;) dir.create(&quot;result/pathview/metabolite_gene&quot;) setwd(&quot;result/pathview/metabolite&quot;) meta_name &lt;- c(&quot;C00022&quot;,&quot;C00024&quot;,&quot;C00031&quot;,&quot;C00025&quot;,&quot;C00032&quot;) meta_value &lt;- c(1,2,-1) names(meta_value) &lt;- meta_name gene_name &lt;- c(&quot;B4GALT2&quot;,&quot;AGPAT3&quot;,&quot;FHIT&quot;) gene_value &lt;- c(3,0.5,-2) names(gene_value) &lt;- gene_name pPathview(cpd.data=meta_value) 4.4.2 pathview metabolite and gene setwd(&quot;../metabolite_gene&quot;) pPathview(cpd.data=meta_value,gene.data=gene_value) setwd(&quot;../../../&quot;) 4.5 Time series analysis 4.5.1 time series using mFuzz #cmeans library(Biobase) library(e1071) TSMfuzz(mexpr,out_dir=&quot;result/mfuzz&quot;,range=c(4,12)) 4.5.2 time series using supraHex TSSupraHex(mexpr,newdata=NULL,out_dir=&quot;result/supraHex/&quot;) 4.6 Clinical analysis 4.6.1 Time series of clinical time_series_ALT &lt;- pCliTS(clinical_index,&quot;ALT&quot;) ggsave(&quot;result/clinical_time_series.png&quot;,time_series_ALT) 4.6.2 Correlation between clinical and metabolites using mantel test mexpr1 &lt;- t(mexpr) clinical_data &lt;- as.data.frame(t(clinical))[,1:5] metabolite_data &lt;- as.data.frame(mexpr1)[1:28,] p &lt;- pCorCliMetMantel(clinical_data,metabolite_data) ggsave(&quot;result/correlation_metabolites_clinical.pdf&quot;,p) ggsave(&quot;result/correlation_metabolites_clinical.png&quot;,p) 4.6.3 Survival analysis p &lt;- survCli(clinical_survival) png(&quot;result/survival_OS.png&quot;) p$p_OS dev.off() png(&quot;result/survival_RFS.png&quot;) p$p_RFS dev.off() png(&quot;result/survival_EFS.png&quot;) p$p_EFS dev.off() 4.6.4 Metabolites’ survival plot metabolites &lt;- c(&quot;C03819&quot;,&quot;C02918&quot;,&quot;C03916&quot;) survMet(dat_surv,metabolites,cluster_method=&quot;mean&quot;,out_dir=&quot;result/survival/metabolites/&quot;) 4.6.5 Cox analysis result &lt;- MetCox(dat_surv) write.table(result,&quot;result/clinical_cox.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names = F) "],["session-information.html", "Chapter 5 Session information", " Chapter 5 Session information sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Catalina 10.15.6 ## ## Matrix products: default ## BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] tcltk stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages: ## [1] e1071_1.7-11 Biobase_2.56.0 BiocGenerics_0.42.0 ## [4] DynDoc_1.74.0 widgetTools_1.74.0 caret_6.0-93 ## [7] lattice_0.20-45 ggplot2_3.3.6 dplyr_1.0.9 ## [10] MNet_0.1.0 ## ## loaded via a namespace (and not attached): ## [1] readxl_1.4.0 backports_1.4.1 systemfonts_1.0.4 ## [4] plyr_1.8.7 igraph_1.3.4 splines_4.2.1 ## [7] crosstalk_1.2.0 listenv_0.8.0 digest_0.6.29 ## [10] foreach_1.5.2 htmltools_0.5.3 fansi_1.0.3 ## [13] magrittr_2.0.3 cluster_2.1.3 tzdb_0.3.0 ## [16] recipes_1.0.1 globals_0.16.0 readr_2.1.2 ## [19] gower_1.0.0 vroom_1.5.7 hardhat_1.2.0 ## [22] colorspace_2.0-3 Mfuzz_2.56.0 textshaping_0.3.6 ## [25] xfun_0.32 crayon_1.5.1 jsonlite_1.8.0 ## [28] hexbin_1.28.2 supraHex_1.34.0 survival_3.4-0 ## [31] zoo_1.8-10 iterators_1.0.14 ape_5.6-2 ## [34] glue_1.6.2 survminer_0.4.9 gtable_0.3.0 ## [37] ipred_0.9-13 car_3.1-0 future.apply_1.9.0 ## [40] shape_1.4.6 abind_1.4-5 scales_1.2.0 ## [43] Boruta_7.0.0 DBI_1.1.3 rstatix_0.7.0 ## [46] Rcpp_1.0.9 xtable_1.8-4 bit_4.0.4 ## [49] proxy_0.4-27 km.ci_0.5-6 stats4_4.2.1 ## [52] lava_1.6.10 prodlim_2019.11.13 DT_0.24 ## [55] glmnet_4.1-4 htmlwidgets_1.5.4 ellipsis_0.3.2 ## [58] pkgconfig_2.0.3 farver_2.1.1 nnet_7.3-17 ## [61] sass_0.4.2 utf8_1.2.2 tidyselect_1.1.2 ## [64] labeling_0.4.2 rlang_1.0.4 tkWidgets_1.74.0 ## [67] reshape2_1.4.4 munsell_0.5.0 cellranger_1.1.0 ## [70] tools_4.2.1 cachem_1.0.6 xgboost_1.6.0.1 ## [73] cli_3.3.0 generics_0.1.3 ranger_0.14.1 ## [76] broom_1.0.0 evaluate_0.16 stringr_1.4.0 ## [79] fastmap_1.1.0 yaml_2.3.5 ragg_1.2.2 ## [82] ModelMetrics_1.2.2.2 knitr_1.39 bit64_4.0.5 ## [85] tidygraph_1.2.1 survMisc_0.5.6 purrr_0.3.4 ## [88] randomForest_4.7-1.1 future_1.27.0 nlme_3.1-157 ## [91] compiler_4.2.1 rstudioapi_0.13 ggsignif_0.6.3 ## [94] tibble_3.1.8 bslib_0.4.0 stringi_1.7.8 ## [97] ggcor_0.9.8.1 Matrix_1.4-1 vegan_2.6-2 ## [100] permute_0.9-7 KMsurv_0.1-5 vctrs_0.4.1 ## [103] pillar_1.8.0 lifecycle_1.0.1 jquerylib_0.1.4 ## [106] data.table_1.14.2 patchwork_1.1.1 R6_2.5.1 ## [109] bookdown_0.28 gridExtra_2.3 parallelly_1.32.1 ## [112] codetools_0.2-18 MASS_7.3-58.1 assertthat_0.2.1 ## [115] withr_2.5.0 mgcv_1.8-40 parallel_4.2.1 ## [118] hms_1.1.1 grid_4.2.1 rpart_4.1.16 ## [121] timeDate_4021.104 tidyr_1.2.0 class_7.3-20 ## [124] rmarkdown_2.14 carData_3.0-5 ggpubr_0.4.0 ## [127] ggnewscale_0.4.7 pROC_1.18.0 lubridate_1.8.0 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
